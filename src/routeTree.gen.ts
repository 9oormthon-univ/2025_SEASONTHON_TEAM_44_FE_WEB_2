/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthenticatedUserRouteRouteImport } from './routes/_authenticated/user/route'
import { Route as AuthenticatedMainRouteRouteImport } from './routes/_authenticated/main/route'
import { Route as AuthenticatedLocationRouteRouteImport } from './routes/_authenticated/location/route'
import { Route as AuthenticatedUserCouponRouteRouteImport } from './routes/_authenticated/user/coupon/route'
import { Route as AuthenticatedMainStoreIdRouteRouteImport } from './routes/_authenticated/main/$storeId/route'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedUserRouteRoute = AuthenticatedUserRouteRouteImport.update({
  id: '/_authenticated/user',
  path: '/user',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedMainRouteRoute = AuthenticatedMainRouteRouteImport.update({
  id: '/_authenticated/main',
  path: '/main',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedLocationRouteRoute =
  AuthenticatedLocationRouteRouteImport.update({
    id: '/_authenticated/location',
    path: '/location',
    getParentRoute: () => rootRouteImport,
  } as any)
const AuthenticatedUserCouponRouteRoute =
  AuthenticatedUserCouponRouteRouteImport.update({
    id: '/coupon',
    path: '/coupon',
    getParentRoute: () => AuthenticatedUserRouteRoute,
  } as any)
const AuthenticatedMainStoreIdRouteRoute =
  AuthenticatedMainStoreIdRouteRouteImport.update({
    id: '/$storeId',
    path: '/$storeId',
    getParentRoute: () => AuthenticatedMainRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/location': typeof AuthenticatedLocationRouteRoute
  '/main': typeof AuthenticatedMainRouteRouteWithChildren
  '/user': typeof AuthenticatedUserRouteRouteWithChildren
  '/main/$storeId': typeof AuthenticatedMainStoreIdRouteRoute
  '/user/coupon': typeof AuthenticatedUserCouponRouteRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/location': typeof AuthenticatedLocationRouteRoute
  '/main': typeof AuthenticatedMainRouteRouteWithChildren
  '/user': typeof AuthenticatedUserRouteRouteWithChildren
  '/main/$storeId': typeof AuthenticatedMainStoreIdRouteRoute
  '/user/coupon': typeof AuthenticatedUserCouponRouteRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/_authenticated/location': typeof AuthenticatedLocationRouteRoute
  '/_authenticated/main': typeof AuthenticatedMainRouteRouteWithChildren
  '/_authenticated/user': typeof AuthenticatedUserRouteRouteWithChildren
  '/_authenticated/main/$storeId': typeof AuthenticatedMainStoreIdRouteRoute
  '/_authenticated/user/coupon': typeof AuthenticatedUserCouponRouteRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/location'
    | '/main'
    | '/user'
    | '/main/$storeId'
    | '/user/coupon'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/location'
    | '/main'
    | '/user'
    | '/main/$storeId'
    | '/user/coupon'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/_authenticated/location'
    | '/_authenticated/main'
    | '/_authenticated/user'
    | '/_authenticated/main/$storeId'
    | '/_authenticated/user/coupon'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  AuthenticatedLocationRouteRoute: typeof AuthenticatedLocationRouteRoute
  AuthenticatedMainRouteRoute: typeof AuthenticatedMainRouteRouteWithChildren
  AuthenticatedUserRouteRoute: typeof AuthenticatedUserRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/user': {
      id: '/_authenticated/user'
      path: '/user'
      fullPath: '/user'
      preLoaderRoute: typeof AuthenticatedUserRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/main': {
      id: '/_authenticated/main'
      path: '/main'
      fullPath: '/main'
      preLoaderRoute: typeof AuthenticatedMainRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/location': {
      id: '/_authenticated/location'
      path: '/location'
      fullPath: '/location'
      preLoaderRoute: typeof AuthenticatedLocationRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/user/coupon': {
      id: '/_authenticated/user/coupon'
      path: '/coupon'
      fullPath: '/user/coupon'
      preLoaderRoute: typeof AuthenticatedUserCouponRouteRouteImport
      parentRoute: typeof AuthenticatedUserRouteRoute
    }
    '/_authenticated/main/$storeId': {
      id: '/_authenticated/main/$storeId'
      path: '/$storeId'
      fullPath: '/main/$storeId'
      preLoaderRoute: typeof AuthenticatedMainStoreIdRouteRouteImport
      parentRoute: typeof AuthenticatedMainRouteRoute
    }
  }
}

interface AuthenticatedMainRouteRouteChildren {
  AuthenticatedMainStoreIdRouteRoute: typeof AuthenticatedMainStoreIdRouteRoute
}

const AuthenticatedMainRouteRouteChildren: AuthenticatedMainRouteRouteChildren =
  {
    AuthenticatedMainStoreIdRouteRoute: AuthenticatedMainStoreIdRouteRoute,
  }

const AuthenticatedMainRouteRouteWithChildren =
  AuthenticatedMainRouteRoute._addFileChildren(
    AuthenticatedMainRouteRouteChildren,
  )

interface AuthenticatedUserRouteRouteChildren {
  AuthenticatedUserCouponRouteRoute: typeof AuthenticatedUserCouponRouteRoute
}

const AuthenticatedUserRouteRouteChildren: AuthenticatedUserRouteRouteChildren =
  {
    AuthenticatedUserCouponRouteRoute: AuthenticatedUserCouponRouteRoute,
  }

const AuthenticatedUserRouteRouteWithChildren =
  AuthenticatedUserRouteRoute._addFileChildren(
    AuthenticatedUserRouteRouteChildren,
  )

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  AuthenticatedLocationRouteRoute: AuthenticatedLocationRouteRoute,
  AuthenticatedMainRouteRoute: AuthenticatedMainRouteRouteWithChildren,
  AuthenticatedUserRouteRoute: AuthenticatedUserRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
